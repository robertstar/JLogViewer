/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.*;
import java.text.*;
import java.util.Date;

import org.jfree.data.time.*;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.ui.RectangleInsets;
import org.jfree.chart.annotations.*;
import org.jfree.data.xy.XYDataset;
import java.awt.Font;
import java.awt.Stroke;
import java.awt.BasicStroke;
import javax.swing.UIManager;

import org.jfree.chart.labels.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.*;
import org.jfree.data.general.DatasetUtilities;
import java.awt.Rectangle;

import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import java.util.StringTokenizer;
import javax.swing.JFrame;
import org.jfree.ui.TextAnchor;


import java.awt.FileDialog;

import javax.swing.JFileChooser;
import java.io.File;    

import java.lang.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;




/**
 *
 * @author Стенд
 */
public class Parse_text extends javax.swing.JFrame {

    /**
     * Creates new form Parse_text
     */
    public Parse_text() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();// получим размер экрана
        this.setSize(screenSize);// установим его
        this.setExtendedState(Frame.MAXIMIZED_BOTH);// установим максимальный размер окна
    }
    
    
    public XYPlot plot;
    public JFreeChart chart;
    public TimeSeriesCollection dataset, dataset2, dataset3, dataset4, dataset5, dataset6, dataset7, dataset8, dataset9, dataset10, dataset11;
    public TimeSeries series1,series2,series3,series4,series5,series6,series7,series8,series9,series10,series11,series12,series13,series14,series15,series16,series17;
    public ChartPanel cp;
    String FilePath;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.j
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LogView v.1.0");
        setIconImage(new ImageIcon("log.png").getImage());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("Файл");

        jMenuItem1.setText("Открыть...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Сохранить");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Выход");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ParseFile(String FilePath){
        // TODO add your handling code here:
        InputStream inputStream = null;
        BufferedReader reader   = null;

        StringTokenizer st      = null;
        String[] fields         = new String[20]; 
        String Event            = new String();
        String Reason           = new String();
        
        String Ia, Ib, Ic, Ua, Ub, Uc, F, Riz, Pout, Pin, Tcoil, VibrXY, VibrZ, Pabc, Qabc, Sabc, cos = new String();
        Ia="";Ib="";Ic="";Ua="";Ub="";Uc="";F="";Riz="";Pin="";Pout="";Tcoil="";VibrXY="";VibrZ="";
        Pabc=""; Qabc=""; Sabc=""; cos="";
        
        int p=0, e=0, r=0;
        long ts = 0L;
        int Trun=0, Tstop=0;

        Date date = new Date();
        DateFormat sdf = new SimpleDateFormat("HH:mm:ss.SSS"); 
        
        /*Очистим текстовое поле*/
        //this.jTextArea1.setText(null);
        
        /*Создаем серии*/
        series1 = new TimeSeries( "Ia", Millisecond.class );
        series2 = new TimeSeries( "Ib", Millisecond.class );
        series3 = new TimeSeries( "Ic", Millisecond.class );   
        series4 = new TimeSeries( "Ua", Millisecond.class );
        series5 = new TimeSeries( "Ub", Millisecond.class );
        series6 = new TimeSeries( "Uc", Millisecond.class );       
        series7 = new TimeSeries( "Pabc", Millisecond.class );
        series8 = new TimeSeries( "Qabc", Millisecond.class );
        series9 = new TimeSeries( "Sabc", Millisecond.class );
        series10 = new TimeSeries( "cos(φ)", Millisecond.class ); 
        series11 = new TimeSeries( "F", Millisecond.class );    
        series12 = new TimeSeries( "Riz", Millisecond.class );
        series13 = new TimeSeries( "Pout", Millisecond.class );
        series14 = new TimeSeries( "Pin", Millisecond.class );
        series15 = new TimeSeries( "Tcoil", Millisecond.class );
        series16 = new TimeSeries( "VibrXY", Millisecond.class );
        series17 = new TimeSeries( "VibrZ", Millisecond.class );
        

        
        /*Создаем коллекцию для серий Ia, Ib, Ic*/
        dataset=new TimeSeriesCollection();       
        /*Создаем коллекцию для серий Ua, Ub, Uc*/
        dataset2=new TimeSeriesCollection();   
        
        /*Создаем коллекцию для серии Pabc*/
        dataset3=new TimeSeriesCollection();
        /*Создаем коллекцию для серии Qabc*/
        dataset4=new TimeSeriesCollection();
        /*Создаем коллекцию для серии Sabc*/
        dataset5=new TimeSeriesCollection();
        /*Создаем коллекцию для серии cos(φ)*/
        dataset6=new TimeSeriesCollection();
              
        /*Создаем коллекцию для серии F*/      
        dataset7=new TimeSeriesCollection();  
        
        /*Создаем коллекцию для серии Riz*/
        dataset8=new TimeSeriesCollection();       
        /*Создаем коллекцию для серий Pout Pin*/
        dataset9=new TimeSeriesCollection();       
        /*Создаем коллекцию для серии Tcoil*/
        dataset10=new TimeSeriesCollection();      
        /*Создаем коллекцию для серий VibrXY, VibrZ*/
        dataset11=new TimeSeriesCollection();
        

        
        /*Создаем график*/
        chart = ChartFactory.createTimeSeriesChart
        ("Запуски и остановы ПЭД",      // Title
         "Время",                       // X-Axis label
         "Токи (А)",                    // Y-Axis label
         dataset,                       // Dataset
         true,                          // Show legend
         true,                          //tooltips
         false                          //url
        );
        
        plot = (XYPlot) chart.getPlot();
        plot.setOrientation(PlotOrientation.VERTICAL);
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);  
        
        plot.getDomainAxis().setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        plot.getDomainAxis().setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6)); 
        
        plot.getRangeAxis().setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        plot.getRangeAxis().setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6)); 

        try 
        {
          //inputStream = new FileInputStream("C:/JAVA/10.02.2015.log");   
          inputStream = new FileInputStream(FilePath); 
          reader = new BufferedReader(new InputStreamReader(inputStream, "CP1251"));
          while (true) 
          {
            String line = reader.readLine();
            if (line == null) break;
            st = new StringTokenizer(line, "{},(),->,[,-,], \t");  
            p=0;
            
            while (st.hasMoreElements()) 
            {
                fields[p++] = st.nextElement().toString();
            }


            
            if( (fields[0] != null) && ("#".equals(fields[0])) ){
                this.jTextArea1.append("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "\n");             
            }
            else
            {
               /*Парсим дату и время*/
                if(fields[0] != null){
                    ts = Long.parseLong(fields[0]);
                    date.setTime(ts);
                }
                
                /*Парсим Событие*/
                if(fields[1] != null){
                    e = Integer.parseInt(fields[1]);
                }

                if(e == 0){
                    Event = "";
                }
                else if(e == 1){
                    Event = "Запуск ПЭД";
                }
                else if(e == 2){
                    Event = "Останов ПЭД";
                }
                else if(e == 3){
                    Event = "Аария ПЭД";
                }

                /*Парсим Причину события*/
                if(fields[2] != null){
                    r = Integer.parseInt(fields[2]);
                }


                /*Ia, Ib, Ic*/
                if(fields[3] != null){series1.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[3]));}
                if(fields[4] != null){series2.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[4]));}
                if(fields[5] != null){series3.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[5]));}

                /*Ua, Ub, Uc*/
                if(fields[6] != null){series4.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[6]));}
                if(fields[7] != null){series5.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[7]));}
                if(fields[8] != null){series6.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[8]));}
                
                /*Pabc*/
                if(fields[9] != null){series7.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[9])/1000);}
                /*Qabc*/
                if(fields[10] != null){series8.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[10])/1000);}
                /*Sabc*/
                if(fields[11] != null){series9.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[11])/1000);}
                /*cos*/
                if(fields[12] != null){series10.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[12]));}

                /*F*/
                if(fields[13] != null){series11.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[13]));}

                /*Riz*/
                if(fields[14] != null){series12.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[14]));}

                /*Pout, Pin*/
                if(fields[15] != null){series13.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[15]));}
                if(fields[16] != null){series14.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[16]));}

                /*Tcoil*/
                if(fields[17] != null){series15.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[17]));}

                /*VibrXY, VibrZ*/
                if(fields[18] != null){series16.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[18]));}
                if(fields[19] != null){series17.addOrUpdate(new Millisecond(date), Float.parseFloat(fields[19]));}


                if(fields[3] != null){Ia = String.format("\tIa = %6.2f", Float.parseFloat(fields[3]));}
                if(fields[4] != null){Ib = String.format("\tIb = %6.2f", Float.parseFloat(fields[4]));}
                if(fields[5] != null){Ic = String.format("\tIc = %6.2f", Float.parseFloat(fields[5]));}
                if(fields[6] != null){Ua = String.format("\tUa = %6.2f", Float.parseFloat(fields[6]));}
                if(fields[7] != null){Ub = String.format("\tUb = %6.2f", Float.parseFloat(fields[7]));}
                if(fields[8] != null){Uc = String.format("\tUc = %6.2f", Float.parseFloat(fields[8]));}  
                
                if(fields[9] != null){Pabc = String.format("\tPabc = %6.2f", Float.parseFloat(fields[9])/1000 );}
                if(fields[10] != null){Qabc = String.format("\tQabc = %6.2f", Float.parseFloat(fields[10])/1000);}
                if(fields[11] != null){Sabc = String.format("\tSabc = %6.2f", Float.parseFloat(fields[11])/1000);}
                if(fields[12] != null){cos = String.format("\tcos(φ) = %6.2f", Float.parseFloat(fields[12]));}
                
                if(fields[13] != null){F = String.format("\tF = %6.2f", Float.parseFloat(fields[13]));}
                if(fields[14] != null){Riz = String.format("\tRiz = %6.2f", Float.parseFloat(fields[14]));}
                if(fields[15] != null){Pout = String.format("\tPout = %6.2f", Float.parseFloat(fields[15]));}
                if(fields[16] != null){Pin = String.format("\tPin = %6.2f", Float.parseFloat(fields[16]));}
                if(fields[17] != null){Tcoil = String.format("\tTcoil = %6.2f", Float.parseFloat(fields[17]));}
                if(fields[18] != null){VibrXY = String.format("\tVibrXY = %6.2f", Float.parseFloat(fields[18]));}
                if(fields[19] != null){VibrZ = String.format("\tVibrZ = %6.2f", Float.parseFloat(fields[19]));}


                /*После пуска или если есть авария*/
                if( ((e==0) && (r==0)) )
                {
                    this.jTextArea1.append(sdf.format(date) + " " +  Ia + Ib + Ic + Ua + Ub + Uc + Pabc + Qabc + Sabc + cos + F + Riz + Pout + Pin + Tcoil + VibrXY + VibrZ + "\n");
                    e=0; r=0;
                }
                /*Событие ПУСК*/
                else if(e==1){
                    if(r == 0){
                        Reason = " [Неопределено]";
                    }
                    else if(r == 1){
                        Reason = " [Ручной]";
                    }
                    else if(r == 2){
                        Reason = " [Автоматический]";
                    }
                    else if(r == 3){
                        Reason = " [Телеуправляемый]";
                    }
                    else if(r == 4){
                        Reason = " [По Программе]";
                    }
                    else if(r == 5){
                        Reason = " [АПВ после: Недогрузка]";
                    }
                    else if(r == 6){
                        Reason = " [АПВ после: Перегрузка]";
                    }
                    else if(r == 7){
                        Reason = " [АПВ после: Дисбаланс токов]";
                    }
                    else if(r == 10){
                        Reason = " [АПВ после: Дисбаланс напряжений]";
                    }
                    else if(r == 11){
                        Reason = " [АПВ после: Турбинное вращение]";
                    }
                    else if(r == 12){
                        Reason = " [АПВ после: Чередование фаз]";
                    }
                    else if(r == 13){
                        Reason = " [АПВ после: Взлом станции]";
                    }
                    else if(r == 14){
                        Reason = " [АПВ после: Давление на приеме насоса мин]";
                    }
                    else if(r == 15){
                        Reason = " [АПВ после: Темп-ра обмотки ПЭД макс]";
                    }
                    else if(r == 16){
                        Reason = " [АПВ после: Вибрация макс]";
                    }
                    else if(r == 100){
                        Reason = " [АПВ после: Сопротивление изоляции]";
                    }
                    else if(r == 101){
                        Reason = " [АПВ после: Частота сети мин]";
                    }
                    else if(r == 102){
                        Reason = " [АПВ после: Частота сети макс]";
                    }
                    else if(r == 103){
                        Reason = " [АПВ после: Давление на выкиде насоса мин]";
                    }
                    else if(r == 104){
                        Reason = " [АПВ после: Давление на выкиде насоса макс]";
                    }
                    else if(r == 105){
                        Reason = " [АПВ после: Отказ связи КТМС]";
                    }
                    else if(r == 106){
                        Reason = " [АПВ после: Отказ УПП]";
                    }
                    else if(r == 107){
                        Reason = " [АПВ после: Сбой ПО КСУ]";
                    }
                    else if(r == 108){
                        Reason = " [АПВ после: Конт манометр]";
                    }
                    else if(r == 109){
                        Reason = " [АПВ после: Темп-ра на приеме насоса макс]";
                    }
                    else if(r == 110){
                        Reason = " [АПВ после: Отказ связи ТМС]";
                    }
                    else if(r == 111){
                        Reason = " [АПВ после: Обрыв фазы A]";
                    }
                    else if(r == 112){
                        Reason = " [АПВ после: Обрыв фазы B]";
                    }
                    else if(r == 113){
                        Reason = " [АПВ после: Обрыв фазы C]";
                    }
                    else if(r == 114){
                        Reason = " [АПВ после: Обрыв всех фаз]";
                    }
                    else if(r == 115){
                        Reason = " [АПВ после: Высокое напряжение фазы A]";
                    }
                    else if(r == 116){
                        Reason = " [АПВ после: Высокое напряжение фазы B]";
                    }
                    else if(r == 117){
                        Reason = " [АПВ после: Высокое напряжение фазы C]";
                    }
                    else if(r == 118){
                        Reason = " [АПВ после: Низкое напряжение фазы A]";
                    }
                    else if(r == 119){
                        Reason = " [АПВ после: Низкое напряжение фазы B]";
                    }
                    else if(r == 120){
                        Reason = " [АПВ после: Низкое напряжение фазы C]";
                    }

                    this.jTextArea1.append(sdf.format(date) + "\t" + Event + Reason + "\n");

                    /*Установим метку запуска*/
                    Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
                    /*Добавление вертикальной линии*/
                    XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,1000,stroke,Color.BLACK);
                    plot.addAnnotation(la);

                    /*Добавление стрелки с меткой*/
                    XYPointerAnnotation pa = new XYPointerAnnotation("Пуск ПЭД"+Reason, ts, 10, (310*(Math.PI/180)) );
                    pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
                    plot.addAnnotation(pa);

                    e=0; r=0;
                }
                /*Событие СТОП*/
                else if(e==2){
                    if(r == 0){
                        Reason = " [Неопределено]";
                    }
                    else if(r == 1){
                        Reason = " [Ручной]";
                    }
                    else if(r == 2){
                        Reason = " [Сопротивление изоляции]";
                    }
                    else if(r == 3){
                        Reason = " [Недогрузка]";
                    }
                    else if(r == 4){
                        Reason = " [Перегрузка]";
                    }
                    else if(r == 9){
                        Reason = " [Взлом станции]";
                    }
                    else if(r == 12){
                        Reason = " [Конт манометр]";
                    }
                    else if(r == 13){
                        Reason = " [Давление на приеме насоса мин]";
                    }
                    else if(r == 14){
                        Reason = " [Темп-ра обмотки ПЭД макс]";
                    }
                    else if(r == 16){
                        Reason = " [Вибрация макс]";
                    }
                    else if(r == 20){
                        Reason = " [Дисбаланс токов]";
                    }
                    else if(r == 21){
                        Reason = " [Дисбаланс напряжений]";
                    }
                    else if(r == 24){
                        Reason = " [По программе]";
                    }
                    else if(r == 26){
                        Reason = " [Сигнал Ан.1 макс]";
                    }
                    else if(r == 27){
                        Reason = " [Сигнал Ан.2 макс]";
                    }
                    else if(r == 28){
                        Reason = " [Телеуправление]";
                    }
                    else if(r == 31){
                        Reason = " [Обрыв фазы A]";
                    }
                    else if(r == 32){
                        Reason = " [Обрыв фазы B]";
                    }
                    else if(r == 33){
                        Reason = " [Обрыв фазы C]";
                    }
                    else if(r == 34){
                        Reason = " [Обрыв всех фаз]";
                    }
                    else if(r == 47){
                        Reason = " [Сбой ПО КСУ]";
                    }
                    else if(r == 55){
                        Reason = " [Отказ УПП]";
                    }
                    else if(r == 89){
                        Reason = " [Отказ связи КТМС]";
                    }
                    else if(r == 93){
                        Reason = " [Отказ связи ТМС]";
                    }
                    else if(r == 200){
                        Reason = " [Частота сети мин]";
                    }
                    else if(r == 201){
                        Reason = " [Частота сети макс]";
                    }
                    else if(r == 202){
                        Reason = " [Давление на выкиде насоса мин]";
                    }
                    else if(r == 203){
                        Reason = " [Давление на выкиде насоса макс]";
                    }
                    else if(r == 204){
                        Reason = " [Турбинное вращение]";
                    }
                    else if(r == 205){
                        Reason = " [Чередование фаз]";
                    }
                    else if(r == 206){
                        Reason = " [Темп-ра на приеме насоса макс]";
                    }
                    else if(r == 207){
                        Reason = " [Высокое напряжение фазы A]";
                    }
                    else if(r == 208){
                        Reason = " [Высокое напряжение фазы B]";
                    }
                    else if(r == 209){
                        Reason = " [Высокое напряжение фазы C]";
                    }
                    else if(r == 210){
                        Reason = " [Низкое напряжение фазы A]";
                    }
                    else if(r == 210){
                        Reason = " [Низкое напряжение фазы B]";
                    }
                    else if(r == 210){
                        Reason = " [Низкое напряжение фазы C]";
                    }
                    this.jTextArea1.append(sdf.format(date) + "\t" + Event + Reason + "\n");

                    /*Установим метку останова*/
                    Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
                    /*Добавление вертикальной линии*/
                    XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,1000,stroke,Color.BLACK);
                    plot.addAnnotation(la);

                    /*Добавление стрелки с меткой*/
                    XYPointerAnnotation pa = new XYPointerAnnotation("Стоп ПЭД"+Reason, ts, 10, (310*(Math.PI/180)) );
                    pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
                    plot.addAnnotation(pa);

                    e=0; r=0;
                }
                /*Событие АВАРИЯ*/
                else if(e==3){
                    double inc=0;
                    if(r == 0){
                        Reason = " [Неопределено]";
                        inc=0.0;
                    }
                    else if(r == 2){
                        Reason = " [Взлом станции]";
                        inc=1.4;
                    }
                    else if(r == 3){
                        Reason = " [Давление на выкиде насоса макс]";
                        inc=2.8;
                    }
                    else if(r == 4){
                        Reason = " [Давление на выкиде насоса мин]";
                        inc=4.2;
                    }
                    else if(r == 5){
                        Reason = " [Давление на приеме насоса мин]";
                        inc=5.6;
                    }
                    else if(r == 6){
                        Reason = " [Высокое напряжение фазы A]";
                        inc=7.0;
                    }
                    else if(r == 7){
                        Reason = " [Высокое напряжение фазы B]";
                        inc=8.4;
                    }
                    else if(r == 8){
                        Reason = " [Высокое напряжение фазы C]";
                        inc=9.8;
                    }
                    else if(r == 9){
                        Reason = " [Низкое напряжение фазы A]";
                        inc=11.2;
                    }
                    else if(r == 10){
                        Reason = " [Низкое напряжение фазы B]";
                        inc=12.6;
                    }
                    else if(r == 11){
                        Reason = " [Низкое напряжение фазы C]";
                        inc=14;
                    }
                    else if(r == 12){
                        Reason = " [Недогрузка]";
                        inc=15.4;
                    }
                    else if(r == 13){
                        Reason = " [Обрыв всех фаз]";
                        inc=16.8;
                    }
                    else if(r == 14){
                        Reason = " [Обрыв фазы A]";
                        inc=18.2;
                    }
                    else if(r == 15){
                        Reason = " [Обрыв фазы B]";
                        inc=19.6;
                    }
                    else if(r == 16){
                        Reason = " [Обрыв фазы C]";
                        inc=21.0;
                    }
                    else if(r == 17){
                        Reason = " [Отказ связи КТМС]";
                        inc=22.4;
                    }
                    else if(r == 18){
                        Reason = " [Отказ связи ТМС]";
                        inc=23.8;
                    }
                    else if(r == 19){
                        Reason = " [Отказ УПП]";
                        inc=25.2;
                    }         
                    else if(r == 20){
                        Reason = " [Перегрузка]";
                        inc=26.6;
                    }
                    else if(r == 21){
                        Reason = " [Поломка контактора]";
                        inc=28;
                    }
                    else if(r == 22){
                        Reason = " [Дисбаланс напряжений]";
                        inc=29.4;
                    }
                    else if(r == 23){
                        Reason = " [Дисбаланс токов]";
                        inc=30.8;
                    }
                    else if(r == 24){
                        Reason = " [Темп-ра обмотки ПЭД макс]";
                        inc=32.2;
                    }
                    else if(r == 25){
                        Reason = " [Вибрация макс]";
                        inc=33.6;
                    }
                    else if(r == 26){
                        Reason = " [Сбой ПО КСУ]";
                        inc=35.0;
                    }
                    else if(r == 27){
                        Reason = " [Сопр-е изоляции]";
                        inc=36.4;
                    }
                    else if(r == 28){
                        Reason = " [Конт манометр]";
                        inc=37.8;
                    }
                    else if(r == 29){
                        Reason = " [Темп-ра на приеме насоса макс]";
                        inc=39.2;
                    }              
                    else if(r == 30){
                        Reason = " [Турб вращение]";
                        inc=40.6;
                    }
                    else if(r == 31){
                        Reason = " [Частота сети макс]";
                        inc=42.0;
                    }
                    else if(r == 32){
                        Reason = " [Частота сети мин]";
                        inc=43.4;
                    }
                    else if(r == 33){
                        Reason = " [Чередование фаз]";
                        inc=44.8;
                    }

                    this.jTextArea1.append(sdf.format(date) + "\t" + Event + Reason + "\n");

                    /*Установим метку аварии*/
                    Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
                    /*Добавление вертикальной линии*/
                    XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,1000,stroke,Color.RED);

                    plot.addAnnotation(la);

                    /*Добавление стрелки с меткой*/
                    XYPointerAnnotation pa = new XYPointerAnnotation("Авария ПЭД"+Reason, ts, 10+inc, (310*(Math.PI/180)) );
                    pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
                    plot.addAnnotation(pa);

                    e=0; r=0;
                }     
            }     
          }
        }
        catch(IOException ex)
        {  
            System.out.println(ex.getMessage());
        } 
        finally 
        {
            try
            {
               reader.close(); 
            }
            catch(IOException ex)
            {  
                System.out.println(ex.getMessage());
            }
        }
        
        /*Добавим серии в колекцию*/
        dataset.addSeries(series1);     //Ia
        dataset.addSeries(series2);     //Ib
        dataset.addSeries(series3);     //Ic     
        dataset2.addSeries(series4);    //Ua
        dataset2.addSeries(series5);    //Ub
        dataset2.addSeries(series6);    //Uc
        
        dataset3.addSeries(series7);    //Pabc 
        dataset4.addSeries(series8);    //Qabc
        dataset5.addSeries(series9);    //Sabc
        dataset6.addSeries(series10);   //cos(φ)
        
        dataset7.addSeries(series11);   //F  
        
        dataset8.addSeries(series12);   //Riz
        dataset9.addSeries(series13);   //Pout
        dataset9.addSeries(series14);   //Pin     
        dataset10.addSeries(series15);  //Tcoil
        dataset11.addSeries(series16);  //VibrXY
        dataset11.addSeries(series17);  //VibrZ
        
        /*Находим максимум и минимум графика*/ 
        Number max = DatasetUtilities.findMaximumRangeValue(dataset);
        Number min = DatasetUtilities.findMinimumRangeValue(dataset); 
        min = 0.0;  
        /*Токи*/
        plot.getRangeAxis(0).setRange((min.floatValue()),(max.floatValue()*3));

        // Ось значений Напряжений
        NumberAxis axis2 = new NumberAxis("Напряжения (В)");
        axis2.setFixedDimension(60.0);
        axis2.setAutoRangeIncludesZero(false);
        axis2.setLabelPaint(Color.black);
        axis2.setTickLabelPaint(Color.black);
        axis2.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis2.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6)); 
        plot.setRangeAxis(1, axis2);
        plot.setRangeAxisLocation(1, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(1, dataset2);
        plot.mapDatasetToRangeAxis(1, 1);
        XYItemRenderer renderer2 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(1, renderer2);
        max = DatasetUtilities.findMaximumRangeValue(dataset2);
        //min = DatasetUtilities.findMinimumRangeValue(dataset2); 
        min = 0.0; 
        plot.getRangeAxis(1).setRange((min.floatValue()),(max.floatValue()*2.7));

        // Ось значения Pabc
        NumberAxis axis3 = new NumberAxis("Акт. мощность (кВт)");
        axis3.setFixedDimension(60.0);
        axis3.setAutoRangeIncludesZero(false);
        axis3.setLabelPaint(Color.black);
        axis3.setTickLabelPaint(Color.black);
        axis3.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis3.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(2, axis3);
        plot.setRangeAxisLocation(2, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(2, dataset3);
        plot.mapDatasetToRangeAxis(2, 2);
        XYItemRenderer renderer3 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(2, renderer3);
        max = DatasetUtilities.findMaximumRangeValue(dataset3);
        //min = DatasetUtilities.findMinimumRangeValue(dataset3); 
        min = 0.0; 
        plot.getRangeAxis(2).setRange((min.floatValue()),(max.floatValue()*2.4));
        
        // Ось значения Qabc
        NumberAxis axis4 = new NumberAxis("Реак. мощность (кВар)");
        axis4.setFixedDimension(60.0);
        axis4.setAutoRangeIncludesZero(false);
        axis4.setLabelPaint(Color.black);
        axis4.setTickLabelPaint(Color.black);
        axis4.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis4.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(3, axis4);
        plot.setRangeAxisLocation(3, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(3, dataset4);
        plot.mapDatasetToRangeAxis(3, 3);
        XYItemRenderer renderer4 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(3, renderer4);
        max = DatasetUtilities.findMaximumRangeValue(dataset4);
        //min = DatasetUtilities.findMinimumRangeValue(dataset4); 
        min = 0.0; 
        plot.getRangeAxis(3).setRange((min.floatValue()),(max.floatValue()*2.1));
            
        // Ось значения Sabc
        NumberAxis axis5 = new NumberAxis("Полн. мощность (кВА)");
        axis5.setFixedDimension(10.0);
        axis5.setAutoRangeIncludesZero(false);
        axis5.setLabelPaint(Color.black);
        axis5.setTickLabelPaint(Color.black);
        axis5.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis5.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(4, axis5);
        plot.setRangeAxisLocation(4, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(4, dataset5);
        plot.mapDatasetToRangeAxis(4, 4);
        XYItemRenderer renderer5 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(4, renderer5);
        max = DatasetUtilities.findMaximumRangeValue(dataset5);
        //min = DatasetUtilities.findMinimumRangeValue(dataset5); 
        min = 0.0; 
        plot.getRangeAxis(4).setRange((min.floatValue()),(max.floatValue()*1.8));
             
        // Ось значения cos(φ)
        NumberAxis axis6 = new NumberAxis("cos(φ)");
        axis6.setFixedDimension(10.0);
        axis6.setAutoRangeIncludesZero(false);
        axis6.setLabelPaint(Color.black);
        axis6.setTickLabelPaint(Color.black);
        axis6.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis6.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(5, axis6);
        plot.setRangeAxisLocation(5, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(5, dataset6);
        plot.mapDatasetToRangeAxis(5, 5);
        XYItemRenderer renderer6 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(5, renderer6);
        
        //max = DatasetUtilities.findMaximumRangeValue(dataset6);
        //min = DatasetUtilities.findMinimumRangeValue(dataset6); 
        max = 1.0;
        min = 0.0;  
        plot.getRangeAxis(5).setRange((min.floatValue()),(max.floatValue()));
      
        // Ось значения Частоты сети
        NumberAxis axis7 = new NumberAxis("Частота (Гц)");
        axis7.setFixedDimension(15.0);
        axis7.setAutoRangeIncludesZero(false);
        axis7.setLabelPaint(Color.black);
        axis7.setTickLabelPaint(Color.black);
        axis7.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis7.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(6, axis7);
        plot.setRangeAxisLocation(6, AxisLocation.BOTTOM_OR_LEFT);
        plot.setDataset(6, dataset7);
        plot.mapDatasetToRangeAxis(6, 6);
        XYItemRenderer renderer7 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(6, renderer7);
        max = DatasetUtilities.findMaximumRangeValue(dataset7);
        //min = DatasetUtilities.findMinimumRangeValue(dataset7); 
        min = 0.0; 
        plot.getRangeAxis(6).setRange((min.floatValue()),(max.floatValue()*1.2));
             
        // Ось значения сопротивления изоляции
        NumberAxis axis8 = new NumberAxis("Сопр. изоляции (кОм)");
        axis8.setFixedDimension(60.0);
        axis8.setAutoRangeIncludesZero(false);
        axis8.setLabelPaint(Color.black);
        axis8.setTickLabelPaint(Color.black);
        axis8.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis8.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(7, axis8);
        plot.setRangeAxisLocation(7, AxisLocation.BOTTOM_OR_RIGHT);
        plot.setDataset(7, dataset8);
        plot.mapDatasetToRangeAxis(7, 7);
        XYItemRenderer renderer8 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(7, renderer8);
        max = DatasetUtilities.findMaximumRangeValue(dataset8);
        //min = DatasetUtilities.findMinimumRangeValue(dataset8); 
        min = 0.0; 
        plot.getRangeAxis(7).setRange((min.floatValue()),(max.floatValue() + (max.floatValue()/10)));
        
        // Ось значения Давлений
        NumberAxis axis9 = new NumberAxis("Давление (МПа)");
        axis9.setFixedDimension(60.0);
        axis9.setAutoRangeIncludesZero(false);
        axis9.setLabelPaint(Color.black);
        axis9.setTickLabelPaint(Color.black);
        axis9.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis9.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(8, axis9);
        plot.setRangeAxisLocation(8, AxisLocation.BOTTOM_OR_RIGHT);
        plot.setDataset(8, dataset9);
        plot.mapDatasetToRangeAxis(8, 8);
        XYItemRenderer renderer9 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(8, renderer9);
        max = DatasetUtilities.findMaximumRangeValue(dataset9);
        //min = DatasetUtilities.findMinimumRangeValue(dataset9); 
        min = 0.0; 
        plot.getRangeAxis(8).setRange((min.floatValue()),(max.floatValue()+1));
       
        // Ось значения Температуры обмотки ПЭД
        NumberAxis axis10 = new NumberAxis("Тем-ра обмотки ПЭД (°С)");
        axis10.setFixedDimension(15.0);
        axis10.setAutoRangeIncludesZero(false);
        axis10.setLabelPaint(Color.black);
        axis10.setTickLabelPaint(Color.black);
        axis10.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis10.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(9, axis10);
        plot.setRangeAxisLocation(9, AxisLocation.BOTTOM_OR_RIGHT);
        plot.setDataset(9, dataset10);
        plot.mapDatasetToRangeAxis(9, 9);
        XYItemRenderer renderer10 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(9, renderer10);
        max = DatasetUtilities.findMaximumRangeValue(dataset10);
        //min = DatasetUtilities.findMinimumRangeValue(dataset10); 
        min = 0.0; 
        plot.getRangeAxis(9).setRange((min.floatValue()),(max.floatValue()+1));
        
        // Ось значения Вибраций ПЭД
        NumberAxis axis11 = new NumberAxis("Вибрация (м/с²)");
        axis11.setFixedDimension(15.0);
        axis11.setAutoRangeIncludesZero(false);
        axis11.setLabelPaint(Color.black);
        axis11.setTickLabelPaint(Color.black);
        axis11.setLabelFont(new Font("Tahoma", Font.BOLD, 8));
        axis11.setTickLabelFont(new Font("Tahoma", Font.PLAIN, 6));
        plot.setRangeAxis(10, axis11);
        plot.setRangeAxisLocation(10, AxisLocation.BOTTOM_OR_RIGHT);
        plot.setDataset(10, dataset11);
        plot.mapDatasetToRangeAxis(10, 10);
        XYItemRenderer renderer11 = new StandardXYItemRenderer();
        //renderer2.setSeriesPaint(0, Color.red);
        plot.setRenderer(10, renderer11);
        max = DatasetUtilities.findMaximumRangeValue(dataset11);
        //min = DatasetUtilities.findMinimumRangeValue(dataset11); 
        min = 0.0; 
        plot.getRangeAxis(10).setRange((min.floatValue()),(max.floatValue()+1));
        
        chart.getTitle().setFont(new Font("Tahoma", Font.BOLD, 14));
        chart.getLegend().setItemFont(new Font("Tahoma", Font.BOLD, 8));
        
              
        /*Создание окна с графиком*/
        JFrame frame = new JFrame("График");

      
        cp = new ChartPanel(chart);
        cp.setPreferredSize(new Dimension(600, 300));

        cp.setRangeZoomable(false);//f
        cp.setMouseWheelEnabled(true);
        
        //cp.setHorizontalAxisTrace(true);
        //cp.setVerticalAxisTrace(true);
        
                
        frame.getContentPane().add(cp);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();// получим размер экрана
        frame.setSize(screenSize);// установим его
        frame.setExtendedState(Frame.MAXIMIZED_BOTH);// установим максимальный размер окна
        frame.show();  
 
    }

            
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        File file;
        FileDialog dialog = new FileDialog(this, "Открыть", FileDialog.LOAD);
        dialog.setDirectory("C:\\");
        dialog.setFile("*.log");
        dialog.setVisible(true);    
        
        String dir = dialog.getDirectory();
        String filename = dialog.getFile();
        file = new File(dir + filename);
        FilePath = file.getAbsolutePath();
        
        if (filename == null)
            System.out.println("You cancelled the choice");
        else{
            System.out.println("You chose " + FilePath); 
            ParseFile(FilePath);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        File file;
        FileDialog dialog = new FileDialog(this, "Сохранить", FileDialog.SAVE);
        dialog.setDirectory("C:\\");
        dialog.setFile("*.txt");
        dialog.setVisible(true);    
        
        String dir = dialog.getDirectory();
        String filename = dialog.getFile();
        file = new File(dir + filename + ".txt");
        String FilePath = file.getAbsolutePath();
        
        if (filename == null)
            System.out.println("You cancelled the choice");
        else{
            System.out.println("You chose " + FilePath); 
            
            
            try{
                String s = this.jTextArea1.getText();
                FileWriter fw = new FileWriter(file);
                fw.write(s);
                fw.close();
            }
            catch(IOException ioe) {
		System.out.println("Exception Caught : " +ioe.getMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Parse_text.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Parse_text.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Parse_text.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Parse_text.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Parse_text().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}





      // TODO add your handling code here:
//        InputStream inputStream = null;
//        BufferedReader reader   = null;
//
//        StringTokenizer st      = null;
//        String[] fields         = new String[20]; 
//        String Event            = new String();
//        String Reason           = new String();
//        
//        String Ia, Ib, Ic, Ua, Ub, Uc = new String();
//        
//        int p=0, e=0, r=0;
//        long ts = 0L;
//        int Trun=0, Tstop=0;
//
//        Date date = new Date();
//        DateFormat sdf = new SimpleDateFormat("HH:mm:ss.SSS"); 
//        
//        /*Очистим текстовое поле*/
//        this.jTextArea1.setText(null);
//        
//        /*Создаем серии*/
//        TimeSeries series1 = new TimeSeries( "Ток фазы A", Millisecond.class );
//        TimeSeries series2 = new TimeSeries( "Ток фазы B", Millisecond.class );
//        TimeSeries series3 = new TimeSeries( "Ток фазы C", Millisecond.class );
//        
//        /*Создаем коллекцию для серий*/
//        TimeSeriesCollection dataset=new TimeSeriesCollection();
//        
//        /*Создаем график*/
//        JFreeChart chart = ChartFactory.createTimeSeriesChart
//        ("Запуски и остановы ПЭД",    // Title
//         "Время",                     // X-Axis label
//         "Значение",                  // Y-Axis label
//         dataset,                     // Dataset
//         true,                        // Show legend
//         true,                        //tooltips
//         false                        //url
//        );
//        
//        XYPlot plot = (XYPlot) chart.getPlot();
//        plot.setOrientation(PlotOrientation.VERTICAL);
//        plot.setBackgroundPaint(Color.lightGray);
//        plot.setDomainGridlinePaint(Color.white);
//        plot.setRangeGridlinePaint(Color.white);  
//        
//        /*Установка высоты шкалы Y*/
//        //chart.getXYPlot().getRangeAxis().setRange(0,60);
//        
//        //plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//        //plot.getRangeAxis().setFixedDimension(15.0);
//        
//        try 
//        {
//          inputStream = new FileInputStream("C:/JAVA/10.02.2015.log");     
//          reader = new BufferedReader(new InputStreamReader(inputStream, "CP1251"));
//          while (true) 
//          {
//            String line = reader.readLine();
//            if (line == null) break;
//            st = new StringTokenizer(line, "{},(),->,[,-,], \t");  
//            p=0;
//            
//            while (st.hasMoreElements()) 
//            {
//                fields[p++] = st.nextElement().toString();
//            }
//
//            /*Парсим дату и время*/
//            ts = Long.parseLong(fields[0]);
//            date.setTime(ts);
//            
//            /*Парсим Событие*/
//            e = Integer.parseInt(fields[1]);
//            if(e == 0){
//                Event = "";
//            }
//            else if(e == 1){
//                Event = "Запуск ПЭД";
//            }
//            else if(e == 2){
//                Event = "Останов ПЭД";
//            }
//            else if(e == 3){
//                Event = "Аария ПЭД";
//            }
//            
//            /*Парсим Причину события*/
//            r = Integer.parseInt(fields[2]);
//            
//            series1.add(new Millisecond(date), Float.parseFloat(fields[3]));
//            series2.add(new Millisecond(date), Float.parseFloat(fields[4]));
//            series3.add(new Millisecond(date), Float.parseFloat(fields[5]));
//
//            Ia = String.format("\tIa = %6.2f", Float.parseFloat(fields[3]));
//            Ib = String.format("\tIb = %6.2f", Float.parseFloat(fields[4]));
//            Ic = String.format("\tIc = %6.2f", Float.parseFloat(fields[5]));
//
//            Ua = String.format("\tUa = %6.2f", Float.parseFloat(fields[6]));
//            Ub = String.format("\tUb = %6.2f", Float.parseFloat(fields[7]));
//            Uc = String.format("\tUc = %6.2f", Float.parseFloat(fields[8]));
//            
//            /*После пуска или если есть авария*/
//            if( ((e==0) && (r==0)) )
//            {
//                this.jTextArea1.append(sdf.format(date) + " " +  Ia + Ib + Ic + Ua + Ub + Uc +"\n");
//                e=0; r=0;
//            }
//            /*Событие ПУСК*/
//            else if(e==1){
//                if(r == 0){
//                    Reason = "";
//                }
//                else if(r == 1){
//                    Reason = " [Ручной]";
//                }
//                else if(r == 2){
//                    Reason = " [Автоматический]";
//                }
//                else if(r == 3){
//                    Reason = " [Телеуправление]";
//                }
//                else if(r == 4){
//                    Reason = " [По программе]";
//                }
//                else if(r == 5){
//                    Reason = " [АПВ после недогрузки]";
//                }
//                else if(r == 6){
//                    Reason = " [АПВ после перегрузки]";
//                }
//                else if(r == 7){
//                    Reason = " [АПВ после дисбаланса токов]";
//                }
//                this.jTextArea1.append(Event + Reason + "\n");
//                this.jTextArea1.append(sdf.format(date) + " "  + Ia + Ib + Ic + Ua + Ub + Uc +"\n");
//                
//                /*Установим метку запуска*/
//                Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//                /*Добавление вертикальной линии*/
//                XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,60,stroke,Color.BLACK);
//                plot.addAnnotation(la);
//
//                /*Добавление стрелки с меткой*/
//                XYPointerAnnotation pa = new XYPointerAnnotation("Пуск ПЭД"+Reason, ts, 24.5, (310*(Math.PI/180)) );
//                pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
//                plot.addAnnotation(pa);
//                e=0; r=0;
//            }
//            /*Событие СТОП*/
//            else if(e==2){
//                if(r == 0){
//                    Reason = "";
//                }
//                else if(r == 1){
//                    Reason = " [Ручной]";
//                }
//                else if(r == 2){
//                    Reason = " [Сопротивление изоляции]";
//                }
//                else if(r == 3){
//                    Reason = " [Недогрузка]";
//                }
//                else if(r == 4){
//                    Reason = " [Перегрузка]";
//                }
//                else if(r == 5){
//                    Reason = " [Минимальное напряжение]";
//                }
//                else if(r == 6){
//                    Reason = " [Максимальное напряжение]";
//                }
//                else if(r == 28){
//                    Reason = " [Телеуправление]";
//                }
//                this.jTextArea1.append(sdf.format(date) + " "  + Ia + Ib + Ic + Ua + Ub + Uc +"\n");
//                this.jTextArea1.append(Event + Reason + "\n");
//                
//                /*Установим метку останова*/
//                Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//                /*Добавление вертикальной линии*/
//                XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,60,stroke,Color.BLACK);
//                plot.addAnnotation(la);
//
//                /*Добавление стрелки с меткой*/
//                XYPointerAnnotation pa = new XYPointerAnnotation("Стоп ПЭД"+Reason, ts, 24.5, (310*(Math.PI/180)) );
//                pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
//                plot.addAnnotation(pa);
//                e=0; r=0;
//            }
//            /*Событие АВАРИЯ*/
//            else if(e==3){
//                this.jTextArea1.append(Event + Reason + "\n");
//                this.jTextArea1.append(sdf.format(date) + " "  + Ia + Ib + Ic + Ua + Ub + Uc +"\n");
//                
//                /*Установим метку аварии*/
//                Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//                /*Добавление вертикальной линии*/
//                XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,60,stroke,Color.RED);
//                
//                plot.addAnnotation(la);
//
//                /*Добавление стрелки с меткой*/
//                XYPointerAnnotation pa = new XYPointerAnnotation("Авария ПЭД", ts, 24.5, (310*(Math.PI/180)) );
//                pa.setTextAnchor(TextAnchor.BASELINE_LEFT);
//                plot.addAnnotation(pa);
//                e=0; r=0;
//            }
//            
//            
//                
//          }
//        }
//        catch(IOException ex)
//        {  
//            System.out.println(ex.getMessage());
//        } 
//        finally 
//        {
//            try
//            {
//               reader.close(); 
//            }
//            catch(IOException ex)
//            {  
//                System.out.println(ex.getMessage());
//            }
//        }
//        
//        /*Добавим серии в колекцию*/
//        dataset.addSeries(series1);
//        dataset.addSeries(series2);
//        dataset.addSeries(series3);
//        
//        /*Находим максимум и минимум графика*/
//        Number max = DatasetUtilities.findMaximumRangeValue(dataset);
//        Number min = DatasetUtilities.findMinimumRangeValue(dataset);     
//        System.out.println("max: " + max.floatValue() + "min: " + min.floatValue());
//        chart.getXYPlot().getRangeAxis().setRange((min.floatValue()-1),(max.floatValue()+1));
//        
//        /*Создание окна с графиком*/
//        JFrame frame = new JFrame("График");
//        ChartPanel cp = new ChartPanel(chart) {
//            @Override
//            public Dimension getPreferredSize() {
//                return new Dimension(800, 500);
//            }
//        };
//       
//        cp.setRangeZoomable(false);
//        cp.setMouseWheelEnabled(true);
//        
//        //cp.setHorizontalAxisTrace(true);
//        //cp.setVerticalAxisTrace(true);
//                
//        frame.getContentPane().add(cp);
//        frame.setSize(800,500);
//        frame.show();

        
//String[] fields = line.split(" ");
//st = new StringTokenizer(line, " ");
//this.jTextArea1.append("\n");
//String[] fields = line.split(new char[]{' '}, StringSplitOptions.RemoveEmptyEntries);
// process fields here
//System.out.println(fields[0] + " | " + fields[1]);
//System.out.println("StringTokenizer Output: " + st.nextElement());
//this.jTextArea1.append(st.nextElement().toString() + " ");
        //long epoch = new SimpleDateFormat ("dd/MM/yyyy HH:mm:ss").parse("01/01/1970 01:00:00");
        
        //String time = "15:30:18.538";
        //DateFormat sdf = new SimpleDateFormat("HH:mm:ss.S");
        
//        String time ="06/02/2015 17:15:37.128";
//        DateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss.S");
//        
//        Date date = null;
//        try 
//        {
//            date = sdf.parse(time);
//        } 
//        catch (ParseException e) 
//        {
//            e.printStackTrace();
//        }
//        
//        long ts = date.getTime();
//        System.out.println("Time: " + sdf.format(date) + " TIMESTAMP: " + Long.toString(ts));

//this.jTextArea1.append(fields[0] + " | " + fields[1] + " | " + fields[2] + "\n");
//this.jTextArea1.append("Time: " + sdf.format(date) + "\n");
//System.out.println("Time: " + sdf.format(date) + " TIMESTAMP: " + Long.toString(ts));


//a.setFont(a.getFont().deriveFont(24f));
//plot.addAnnotation(a);
/*Установка высоты шкалы Y*/
//chart.getXYPlot().getRangeAxis().setRange(minY,maxY);
//chart.getXYPlot().getRangeAxis().setRange(0,30);
//chart.getXYPlot().setRenderer(new XYSplineRenderer());
//minY = Math.min(Float.parseFloat(fields[3]), minY);
//maxY = Math.max(Float.parseFloat(fields[3]), maxY);
//TimeSeriesCollection dataset=new TimeSeriesCollection();
//        JFreeChart chart = ChartFactory.createTimeSeriesChart
//        ("Запуски и остановы ПЭД",    // Title
//         "Время",                     // X-Axis label
//         "Значение",                  // Y-Axis label
//         dataset,                     // Dataset
//         true,                        // Show legend
//         true,                        //tooltips
//         false                        //url
//        );
        
//        XYPlot plot = (XYPlot) chart.getPlot();
//        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//        
//        /*Установим метку запуска*/
//        double x = dataset.getXValue(0, Trun);
//        //double y = dataset.getYValue(0, 50 - 1);
//        Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//        /*Добавление вертикальной линии*/
//        XYLineAnnotation line = new XYLineAnnotation(x,0,x,60,stroke,Color.BLACK);
//        plot.addAnnotation(line);
//        
//        /*Добавление стрелки с меткой*/
//        XYPointerAnnotation point = new XYPointerAnnotation("                    Запуск ПЭД", x, 24.5, (310*(Math.PI/180)) );
//        plot.addAnnotation(point);
        
        
//        /*Установим метку останова*/
//        x = dataset.getXValue(0, Tstop-1);
//        stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//        /*Добавление вертикальной линии*/
//        line = new XYLineAnnotation(x,0,x,60,stroke,Color.BLACK);
//        plot.addAnnotation(line);
//        
//        /*Добавление стрелки с меткой*/
//        point = new XYPointerAnnotation("                        Останов ПЭД", x, 24.5, (310*(Math.PI/180)) );
//        plot.addAnnotation(point);
//            if( (e>0)&&(r>0) ){
//                this.jTextArea1.append(Event + Reason + "\n");
//                Event = ""; Reason = "";
//                e = 0; r = 0;
//                
//                /*Установим метку запуска*/
//                Stroke stroke = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
//                /*Добавление вертикальной линии*/
//                XYLineAnnotation la = new XYLineAnnotation(ts,0,ts,60,stroke,Color.BLACK);
//                plot.addAnnotation(la);
//
//                /*Добавление стрелки с меткой*/
//                XYPointerAnnotation pa = new XYPointerAnnotation("                    Запуск ПЭД", ts, 24.5, (310*(Math.PI/180)) );
//                plot.addAnnotation(pa);
//            }
        //double lowestLow = getLowestLow(dataset);
        //double highestHigh = getHighestHigh(dataset);
        //chart.getXYPlot().getRangeAxis().setRange(lowestLow*0.95, highestHigh*1.05);
        
        //chart.getXYPlot().setDataset(dataset);
//        plot = (XYPlot) chart.getXYPlot();
//        plot.setOrientation(PlotOrientation.VERTICAL);
//        plot.setBackgroundPaint(Color.lightGray);
//        plot.setDomainGridlinePaint(Color.white);
//        plot.setRangeGridlinePaint(Color.white);  
//        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
//        plot.getRangeAxis().setFixedDimension(15.0);
//        XYDotRenderer renderer = new XYDotRenderer();
//        renderer.setDotHeight(1);
//        renderer.setDotWidth(1);
//        //renderer.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator("ToolTip {0}"));
//        XYSeriesLabelGenerator legendGenerator = new StandardXYSeriesLabelGenerator("ToolTip {0}");
//        renderer.setLegendItemToolTipGenerator(legendGenerator);
//        plot.setRenderer(renderer);
        
//        plot = chart.getXYPlot();
//        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
//        renderer.setShapesVisible(true);
//        renderer.setShapesFilled(true);

//        XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();
//        r1.setSeriesStroke(0, new BasicStroke(1f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
//        r1.setSeriesShape(0, new Rectangle(0, 0));
//        r1.setSeriesPaint(0, Color.MAGENTA);
//        r1.setBaseToolTipGenerator(new CustomXYToolTipGenerator());
//        
//        XYToolTipGenerator tt1 = new XYToolTipGenerator() {
//         public String generateToolTip(XYDataset dataset, int series, int item) {
//            StringBuffer sb = new StringBuffer();
//            Number x = dataset.getX(series, item);
//            Number y = dataset.getY(series, item);
//            sb.append("<html><p style='color:blue;'>HEADER1:</p><br />");
//            sb.append(String.format("%.2fHz <br />", x.doubleValue()));
//            sb.append(String.format("%.2fdBm</html>", y.doubleValue()));
//            return sb.toString();
//         }
//      };
//        
//        r1.setSeriesToolTipGenerator(0, tt1);
//        plot = chart.getXYPlot();
//        plot.setRenderer(r1); 
//        
//        UIManager.put("ToolTip.background", new Color(0.9f, 0.9f, 0.9f));
//        UIManager.put("ToolTip.foreground", new Color(0.2f, 0.2f, 0.2f));
//        UIManager.put("ToolTip.font", null);